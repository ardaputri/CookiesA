<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
  <title>Simple Messaging App</title>
  <style>
    /* Reset */
    *, *::before, *::after {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
        Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      background: #f0f2f5;
      display: flex;
      flex-direction: column;
      height: 100vh;
      max-height: 600px;
      max-width: 350px;
      margin-left: auto;
      margin-right: auto;
      border: 1px solid #ccc;
      border-radius: 8px;
      overflow: hidden;
      color: #333;
    }

    header {
      background-color: #4267b2;
      color: white;
      padding: 16px 20px;
      font-size: 1.25rem;
      font-weight: 600;
      text-align: center;
      user-select: none;
    }

    nav {
      display: flex;
      justify-content: space-around;
      background-color: #fff;
      padding: 10px 0;
      border-bottom: 1px solid #ddd;
    }

    nav button {
      background: none;
      border: none;
      color: #4267b2;
      font-weight: bold;
      cursor: pointer;
      transition: color 0.3s;
    }

    nav button:hover {
      color: #365899;
    }

    .section {
      display: none;
      flex-direction: column;
      flex: 1 1 auto;
      padding: 10px;
      overflow-y: auto;
      gap: 8px;
      background: #e5ddd5;
      transition: opacity 0.5s ease;
    }

    .active {
      display: flex;
      opacity: 1;
    }

    .message {
      max-width: 80%;
      padding: 10px 14px;
      border-radius: 18px;
      font-size: 0.9rem;
      line-height: 1.3;
      word-wrap: break-word;
      position: relative;
      box-shadow: 0 1px 1.5px rgba(0,0,0,0.15);
      user-select: text;
    }
    .message.user {
      align-self: flex-end;
      background-color: #dcf8c6;
      border-bottom-right-radius: 4px;
    }
    .message.system {
      align-self: flex-start;
      background-color: white;
      border-bottom-left-radius: 4px;
    }
    .timestamp {
      font-size: 0.7rem;
      color: #888;
      margin-top: 4px;
      text-align: right;
      user-select: none;
    }

    footer {
      padding: 10px 12px;
      background-color: white;
      border-top: 1px solid #ddd;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    textarea {
      flex: 1;
      resize: none;
      padding: 8px 12px;
      border-radius: 20px;
      border: 1px solid #ccc;
      font-size: 1rem;
      font-family: inherit;
      max-height: 100px;
      min-height: 36px;
      line-height: 1.3;
    }
    textarea:focus {
      border-color: #4267b2;
      outline: none;
      box-shadow: 0 0 5px #4267b2;
    }
    button {
      background-color: #4267b2;
      border: none;
      color: white;
      padding: 10px 14px;
      border-radius: 20px;
      font-size: 1.1rem;
      cursor: pointer;
      user-select: none;
      transition: background-color 0.3s ease;
      flex-shrink: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
    }
    button:disabled {
      background-color: #90b3f9;
      cursor: not-allowed;
    }
    button:hover:not(:disabled) {
      background-color: #365899;
    }

    /* Scrollbar style for main */
    .section::-webkit-scrollbar {
      width: 6px;
    }
    .section::-webkit-scrollbar-thumb {
      background-color: rgba(0,0,0,0.15);
      border-radius: 3px;
    }
    .section::-webkit-scrollbar-track {
      background-color: transparent;
    }
  </style>
</head>
<body>
  <header>Messaging App</header>
  <nav>
    <button id="homeBtn">Home</button>
    <button id="contactBtn">Contact</button>
  </nav>
  
  <div id="home" class="section active">
    <main id="messages"></main>
    <footer>
      <textarea id="inputMessage" rows="1" placeholder="Type your message..." aria-label="Message input"></textarea>
      <button id="sendBtn" aria-label="Send message" disabled>
        &#9658;
      </button>
    </footer>
  </div>

  <div id="contact" class="section">
    <h2>Contact Us</h2>
    <p>If you have any questions, feel free to reach out!</p>
    <p>Email: support@example.com</p>
  </div>

  <script>
    (function() {
      const messagesContainer = document.getElementById('messages');
      const inputMessage = document.getElementById('inputMessage');
      const sendBtn = document.getElementById('sendBtn');
      const homeSection = document.getElementById('home');
      const contactSection = document.getElementById('contact');
      const homeBtn = document.getElementById('homeBtn');
      const contactBtn = document.getElementById('contactBtn');

      // Load messages from localStorage or empty array
      let messages = [];
      try {
        const loaded = localStorage.getItem('messagesAppMessages');
        if (loaded) messages = JSON.parse(loaded);
      } catch(e) {
        messages = [];
      }

      // Format timestamp to HH:MM AM/PM
      function formatTimestamp(ts) {
        const d = new Date(ts);
        const h = d.getHours() % 12 || 12;
        const m = d.getMinutes().toString().padStart(2, '0');
        const ampm = d.getHours() >= 12 ? 'PM' : 'AM';
        return h + ':' + m + ' ' + ampm;
      }

      // Render all messages
      function renderMessages() {
        messagesContainer.innerHTML = '';
        for (const msg of messages) {
          const msgElem = document.createElement('div');
          msgElem.className = 'message ' + (msg.user ? 'user' : 'system');
          msgElem.textContent = msg.text;
          const tsElem = document.createElement('div');
          tsElem.className = 'timestamp';
          tsElem.textContent = formatTimestamp(msg.timestamp);
          msgElem.appendChild(tsElem);
          messagesContainer.appendChild(msgElem);
        }
        // Scroll to the latest message
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      // Handle sending messages
      function sendMessage() {
        const text = inputMessage.value.trim();
        if (text) {
          const message = {
            text: text,
            timestamp: Date.now(),
            user: true
          };
          messages.push(message);
          localStorage.setItem('messagesAppMessages', JSON.stringify(messages));
          renderMessages();
          inputMessage.value = '';
          sendBtn.disabled = true;
        }
      }

      // Event listeners
      inputMessage.addEventListener('input', () => {
        sendBtn.disabled = !inputMessage.value.trim();
      });

      sendBtn.addEventListener('click', sendMessage);

      // Navigation
      homeBtn.addEventListener('click', () => {
        homeSection.classList.add('active');
        contactSection.classList.remove('active');
      });

      contactBtn.addEventListener('click', () => {
        contactSection.classList.add('active');
        homeSection.classList.remove('active');
      });

      // Initial render
      renderMessages();
    })();
  </script>
</body>
</html>
